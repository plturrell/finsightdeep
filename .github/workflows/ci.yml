name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          pip install -e ".[dev]"
      - name: Run linters
        run: |
          flake8 src/
          black --check src/
          isort --check-only --profile black src/
          mypy src/

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
      - name: Run tests
        run: |
          python -m pytest tests/ --cov=src/ --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      - name: Run security scans
        run: |
          bandit -r src/ -x tests/
          safety check

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
      - name: Build documentation
        run: |
          cd doc
          make html
      - name: Upload documentation artifact
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: doc/_build/html/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      - name: Build package
        run: |
          python -m build
      - name: Check package
        run: |
          twine check dist/*
      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: dist/

  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and export
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deployment/Dockerfile
          tags: hana-ai-toolkit:test
          outputs: type=docker,dest=/tmp/hana-ai-toolkit.tar
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: /tmp/hana-ai-toolkit.tar

  canary-validate:
    name: Validate Canary Deployment
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
      - name: Validate K8s manifests
        run: |
          sudo snap install kubectl --classic
          kubectl validate -f deployment/canary/k8s-canary.yaml --validate=false
      - name: Validate CF manifests
        run: |
          grep -q "applications:" deployment/canary/cf-canary.yml
      - name: Test canary scripts
        run: |
          chmod +x deployment/canary/canary-deployment.sh
          chmod +x deployment/canary/canary-promotion.sh
          deployment/canary/canary-deployment.sh --help || true
          deployment/canary/canary-promotion.sh --help || true